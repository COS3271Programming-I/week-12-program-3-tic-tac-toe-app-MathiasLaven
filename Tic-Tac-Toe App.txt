package my_project;

import java.util.Scanner;

class TTT {
	static Scanner userinput = new Scanner(System.in);
	char blank = '‚¶Å'; //so it's not copy/pasted everywhere
	char[][] board = { { blank, blank, blank }, { blank, blank, blank }, { blank, blank, blank } };
	int turn = 1;
	char player = 'X';
	char firstPlayer = 'X'; //also so it's not copy/pasted

	public void printBoard() {
		int i, j;
		System.out.println("");
		for (i = 0; i <= 2; i++) {
			for (j = 0; j <= 2; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println("");
		}
	}

	public void move(int i, int j) {
		board[i][j] = player;
		turn++;
	}

	public void unDoMove(int i, int j) {
		board[i][j] = blank;
		turn--;
	}

	public void switchPlayers() {
		if (player == 'X') {
			player = 'O';
		} else
			player = 'X';
	}

	public boolean isLegal(int i, int j) {
		if (board[i][j] == blank)
			return true;
		else
			return false;
	}

	public boolean winner() {
		int i;
		boolean test = false;
		for (i = 0; i <= 2; i++) {
			if ((board[i][0] == board[i][1]) && (board[i][1] == board[i][2]) && (board[i][0] != blank)) {
				test = true;
			}
			if ((board[0][i] == board[1][i]) && (board[1][i] == board[2][i]) && (board[0][i] != blank)) {
				test = true;
			}
		}
		if ((board[0][0] == board[1][1]) && (board[1][1] == board[2][2]) && (board[0][0] != blank)) {
			test = true;
		}

		if ((board[2][0] == board[1][1]) && (board[1][1] == board[0][2]) && (board[2][0] != blank)) {
			test = true;
		}
		return test;
	}

	public void human() {
		int i, j;

		boolean test = false; // have I found a place to go
		while (test == false) {
			System.out.print("\nEnter coordinates separated by a space. The first number is the row, and the second is the column. \n>>");
			i = userinput.nextInt();
			j = userinput.nextInt();
			userinput.nextLine();
			if (isLegal(i - 1, j - 1) == true) {
				test = true;
				move(i - 1, j - 1);
			} else {
				System.out.println("Error: entered move not legal.");
			}
		}
	}
	
	//complex function to find a winning move for either team, either to block or utilize itself
	int[] findWinningMove() {
		int[] move = {-1, -1};
		char playerFound = 'N'; //exists so the current player (the AI) is always prioritized
		
		//loop over every row/column
		for (int i = 0; i <= 2; i++) {
			//try the row
			if (board[i][0] == board[i][1] && board[i][2] == blank && board[i][0] != blank) {
				if (playerFound != player) {
					move[0] = i; move[1] = 2; playerFound = board[i][0];
				}
			} else if (board[i][1] == board[i][2] && board[i][0] == blank && board[i][1] != blank) {
				if (playerFound != player) {
					move[0] = i; move[1] = 0; playerFound = board[i][1];
				}
			} else if (board[i][0] == board[i][2] && board[i][1] == blank && board[i][0] != blank) {
				if (playerFound != player) {
					move[0] = i; move[1] = 1; playerFound = board[i][0];
				}
			}
			
			//try the column
			if (board[0][i] == board[1][i] && board[2][i] == blank && board[0][i] != blank) {
				if (playerFound != player) {
					move[0] = 2; move[1] = i; playerFound = board[0][1];
				}
			} else if (board[1][i] == board[2][i] && board[0][i] == blank && board[1][i] != blank) {
				if (playerFound != player) {
					move[0] = 0; move[1] = i; playerFound = board[1][i];
				}
			} else if (board[0][i] == board[2][i] && board[1][i] == blank && board[0][i] != blank) {
				if (playerFound != player) {
					move[0] = 1; move[1] = i; playerFound = board[0][i];
				}
			}
		}
		
		//try the \ diagonal
		if (board[0][0] == board[1][1] && board[2][2] == blank && board[0][0] != blank) {
			if (playerFound != player) {
				move[0] = 2; move[1] = 2; playerFound = board[0][0];
			}
		} else if (board[1][1] == board[2][2] && board[0][0] == blank && board[1][1] != blank) {
			if (playerFound != player) {
				move[0] = 0; move[1] = 0; playerFound = board[1][1];
			}
		} else if (board[0][0] == board[2][2] && board[1][1] == blank && board[0][0] != blank) {
			if (playerFound == player) {
				move[0] = 1; move[1] = 1; playerFound = board[0][0];
			}
		}
		
		//and the / diagonal
		if (board[2][0] == board[1][1] && board[0][2] == blank && board[2][0] != blank) {
			if (playerFound != player) {
				move[0] = 0; move[1] = 2; playerFound = board[2][0];
			}
		} else if (board[1][1] == board[0][2] && board[2][0] == blank && board[1][1] != blank) {
			if (playerFound != player) {
				move[0] = 2; move[1] = 0; playerFound = board[1][1];
			}
		} else if (board[2][0] == board[0][2] && board[1][1] == blank && board[2][0] != blank) {
			if (playerFound != player) {
				move[0] = 1; move[1] = 1; playerFound = board[2][0];
			}
		}
		
		//return best move if found
		return move;
	}

	public void ai() {
//		int i, j;
		// random
//		boolean test = false; // have I found a place to go
//		while (test == false) {
//			i = (int) (Math.random() * 3.0);
//			j = (int) (Math.random() * 3.0);
//			if (isLegal(i, j) == true) {
//				test = true;
//				move(i, j);
//			}
//		}
		
		//this finds a winning move for either team,
		//so it covers both blocking and just straight up winning
		int[] winningMove = findWinningMove();
		if (winningMove[0] != -1) {
			move(winningMove[0], winningMove[1]);
		
		//turn 1 strategy is exceptionally important
		} else if (turn == 2) { 
			//check if the first player went in the middle (not the best play, surprisingly)
			if (board[1][1] == firstPlayer) {
				move(0, 0); //any corner works, i just kept it simple
			} else { //if they didn't play middle, take the middle
				move(1, 1);
			}
		} else {
			//the AI is really good at blocking, so not too concerned over here
			//just a simple try every square (except the middle, which was taken turn 1 for sure)
			if (isLegal(0, 1)) {
				move(0, 1);
			} else if (isLegal(1, 0)) {
				move(1, 0);
			} else if (isLegal(2, 1)) {
				move(2, 1);
			} else if (isLegal(1, 2)) {
				move(1, 2);
			} else if (isLegal(0, 0)) {
				move(0, 0);
			} else if (isLegal(0, 2)) {
				move(0, 2);
			} else if (isLegal(2, 0)) {
				move(2, 0);
			} else {
				move(2, 2);
			}
		}
		
		System.out.println("\nThe AI is playing, please wait... ");

	}
}

public class MyClass {
	static Scanner userinput = new Scanner(System.in);

	public static void main(String[] args) {
		TTT game = new TTT();
		game.printBoard();
		for (int i = 1; i <= 5; i++) {
			game.human();
			game.printBoard();
			if ((game.winner() == true) || (i == 5)) {
				break;
			}
			game.switchPlayers();
			game.ai();
			game.printBoard();
			if ((game.winner() == true) || (i == 5)) {
				break;
			}
			game.switchPlayers();
		}

		if (game.winner() == true) {
			System.out.println("\nThe winner is " + game.player);
		} else {
			System.out.println("\nCat Game.");
		}
	} // end main line
} // end class
